syntax = "proto3";

package complex.v1;

option go_package = "github.com/example/complex/v1;complexv1";

import "google/api/annotations.proto";

// ComplexPathService tests various HTTP path patterns
service ComplexPathService {
  // Simple path parameter
  rpc GetItem(GetItemRequest) returns (Item) {
    option (google.api.http) = {
      get: "/items/{id}"
    };
  }
  
  // Multiple path parameters
  rpc GetUserOrder(GetUserOrderRequest) returns (Order) {
    option (google.api.http) = {
      get: "/users/{user_id}/orders/{order_id}"
    };
  }
  
  // Nested resource with multiple params
  rpc GetOrderItem(GetOrderItemRequest) returns (OrderItem) {
    option (google.api.http) = {
      get: "/users/{user_id}/orders/{order_id}/items/{item_id}"
    };
  }
  
  // Complex path with wildcards
  rpc GetResource(GetResourceRequest) returns (Resource) {
    option (google.api.http) = {
      get: "/organizations/{org}/projects/{project}/resources/{resource_id}"
    };
  }
  
  // Mixed HTTP methods
  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UserProfile) {
    option (google.api.http) = {
      patch: "/users/{user_id}/profile"
      body: "profile"
    };
  }
}

message Item {
  string id = 1;
  string name = 2;
}

message Order {
  string id = 1;
  string user_id = 2;
}

message OrderItem {
  string id = 1;
  string order_id = 2;
  string item_id = 3;
}

message Resource {
  string id = 1;
  string organization = 2;
  string project = 3;
}

message UserProfile {
  string user_id = 1;
  string display_name = 2;
  string bio = 3;
}

message GetItemRequest {
  string id = 1;
}

message GetUserOrderRequest {
  string user_id = 1;
  string order_id = 2;
}

message GetOrderItemRequest {
  string user_id = 1;
  string order_id = 2;
  string item_id = 3;
}

message GetResourceRequest {
  string org = 1;
  string project = 2;
  string resource_id = 3;
}

message UpdateUserProfileRequest {
  string user_id = 1;
  UserProfile profile = 2;
}