edition = "2023";

package testdata;

import "google/api/annotations.proto";

option go_package = "github.com/farhaan/protoc-gen-go-http-server-interface/tests/testdata";

// User represents a user entity
message User {
  string id = 1;
  string name = 2;
  string email = 3;
  int32 age = 4;
}

// CreateUserRequest for creating a new user
message CreateUserRequest {
  User user = 1;
}

// UpdateUserRequest for updating a user
message UpdateUserRequest {
  string user_id = 1;
  User user = 2;
}

// GetUserRequest for getting a user by ID
message GetUserRequest {
  string user_id = 1;
}

// DeleteUserRequest for deleting a user
message DeleteUserRequest {
  string user_id = 1;
}

// ListUsersRequest for listing users with pagination
message ListUsersRequest {
  int32 page_size = 1;
  string page_token = 2;
  string filter = 3;
}

// ListUsersResponse for listing users response
message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// Empty message for operations that don't return data
message Empty {}

// UserService manages user entities with editions syntax
service UserService {
  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
  }

  // Get a user by ID
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}"
    };
  }

  // Update an existing user
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}"
      body: "user"
      additional_bindings {
        patch: "/v1/users/{user_id}"
        body: "user"
      }
    };
  }

  // Delete a user
  rpc DeleteUser(DeleteUserRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}"
    };
  }

  // List users with pagination and filtering
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // Custom HTTP method for user activation
  rpc ActivateUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      custom {
        kind: "PATCH"
        path: "/v1/users/{user_id}/activate"
      }
    };
  }
}