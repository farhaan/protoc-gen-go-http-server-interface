syntax = "proto3";

package openapi.v1;

option go_package = "github.com/example/openapi/v1;openapiv1";

import "google/api/annotations.proto";

// ProductService demonstrates compatibility with OpenAPI annotations
service ProductService {
  // GetProduct retrieves a product by ID
  // This endpoint supports both HTTP routing and OpenAPI documentation
  rpc GetProduct(GetProductRequest) returns (Product) {
    option (google.api.http) = {
      get: "/products/{product_id}"
    };
    // Note: In a real scenario, OpenAPI annotations would be here like:
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   summary: "Get product by ID"
    //   description: "Retrieves a single product using its unique identifier"
    //   tags: ["products"]
    //   responses: {
    //     key: "200"
    //     value: {
    //       description: "Product found successfully"
    //       schema: {
    //         json_schema: {ref: "#/definitions/Product"}
    //       }
    //     }
    //   }
    //   responses: {
    //     key: "404" 
    //     value: {description: "Product not found"}
    //   }
    // };
  }
  
  // CreateProduct creates a new product
  rpc CreateProduct(CreateProductRequest) returns (Product) {
    option (google.api.http) = {
      post: "/products"
      body: "*"
    };
    // OpenAPI operation metadata would go here
  }
  
  // ListProducts returns a paginated list of products
  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse) {
    option (google.api.http) = {
      get: "/products"
    };
    // OpenAPI operation with query parameters would be defined here
  }
  
  // UpdateProduct updates an existing product
  rpc UpdateProduct(UpdateProductRequest) returns (Product) {
    option (google.api.http) = {
      put: "/products/{product.product_id}"
      body: "product"
    };
  }
  
  // DeleteProduct removes a product
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse) {
    option (google.api.http) = {
      delete: "/products/{product_id}"
    };
  }
}

// Product represents a product entity
// OpenAPI schema annotations would typically be added here
message Product {
  string product_id = 1;      // @example: "prod_123"
  string name = 2;            // @example: "Wireless Headphones"
  string description = 3;     // @example: "High-quality wireless headphones"
  double price = 4;           // @example: 99.99
  string category = 5;        // @example: "Electronics"
  bool available = 6;         // @example: true
  int64 created_at = 7;       // Unix timestamp
  int64 updated_at = 8;       // Unix timestamp
}

// GetProductRequest for retrieving a product
message GetProductRequest {
  string product_id = 1;      // Required product identifier
}

// CreateProductRequest for creating products  
message CreateProductRequest {
  string name = 1;            // Required product name
  string description = 2;     // Optional description
  double price = 3;           // Required price (must be positive)
  string category = 4;        // Required category
}

// ListProductsRequest for listing products with pagination
message ListProductsRequest {
  int32 page_size = 1;        // Number of products per page (max 100)
  string page_token = 2;      // Token for pagination
  string category = 3;        // Optional category filter
  double min_price = 4;       // Optional minimum price filter
  double max_price = 5;       // Optional maximum price filter
  bool available_only = 6;    // Filter for available products only
}

// ListProductsResponse for product list with pagination
message ListProductsResponse {
  repeated Product products = 1;       // List of products
  string next_page_token = 2;         // Token for next page
  int32 total_count = 3;              // Total number of products (optional)
}

// UpdateProductRequest for updating products
message UpdateProductRequest {
  Product product = 1;        // Product to update (product_id required)
}

// DeleteProductRequest for deleting products
message DeleteProductRequest {
  string product_id = 1;      // Required product identifier
}

// DeleteProductResponse for delete confirmation
message DeleteProductResponse {
  bool success = 1;           // Deletion success status
  string message = 2;         // Optional status message
}